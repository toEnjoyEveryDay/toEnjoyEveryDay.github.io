import{_ as i,r as c,o as u,c as r,b as n,d as s,e as a,w as t,a as o}from"./app-eaea479b.js";const k={},d={href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-1.html",target:"_blank",rel:"noopener noreferrer"},m=o(`<h2 id="类型注解" tabindex="-1"><a class="header-anchor" href="#类型注解" aria-hidden="true">#</a> 类型注解</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 约定变量 age 的类型为 number 类型</span>
<span class="token keyword">let</span> age <span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><span style="color:red;"><code>:number</code></span>就是类型注解，它为变量提供类型约束。</li><li>约定了什么类型，就只能给该变量赋值什么类型的值，否则报错。</li><li>而且<code>:</code>约定类型之后，代码的提示也会非常清晰。</li></ul>`,3),b=n("div",{class:"custom-container danger"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M10 10l4 4m0-4l-4 4"})])]),n("p",{class:"custom-container-title"},"错误演示"),n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" age"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"18"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 报错：不能将类型“string”分配给类型“number”"),s(`
age `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'19'"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),v=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"小结"),n("ul",null,[n("li",null,[s("什么是类型注解？ "),n("ul",null,[n("li",null,"变量后面约定类型的语法，就是类型注解")])]),n("li",null,[s("类型注解作用？ "),n("ul",null,[n("li",null,"约定类型，明确提示")])])])],-1),g=o(`<h2 id="原始类型" tabindex="-1"><a class="header-anchor" href="#原始类型" aria-hidden="true">#</a> 原始类型</h2><blockquote><p>知道：TS 有哪些类型，掌握：原始类型使用</p></blockquote><p>JavaScript常用类型：</p><ul><li>简单类型，<code>number</code> <code>string</code> <code>boolean</code> <code>null</code> <code>undefined</code></li><li>复杂类型，对象 数组 函数</li></ul><p>TypeScript 新增类型：</p><ul><li>联合类型、自定义类型(类型别名)、接口、元组、字面量类型、枚举、void、any、泛型 等</li></ul><p>原始类型使用简单，完全按照JavaScript的类型来书写即可。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> myName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;黑马程序员&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> isLoading<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> nullValue<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> undefinedValue<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组类型" tabindex="-1"><a class="header-anchor" href="#数组类型" aria-hidden="true">#</a> 数组类型</h2><blockquote><p>掌握：数组类型的两种写法</p></blockquote>`,10),h=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" numbers"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" strings"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"Array"),n("span",{class:"token operator"},"<"),n("span",{class:"token builtin"},"string"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'a'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'b'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'c'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),w=o(`<p>推荐使用<span style="color:red;font-size:28px;"><code>number[]写法</code></span></p><p>思考：如果数组需要存储多种类型数据呢？</p><h2 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h2><blockquote><p>掌握：<em><strong>通过联合类型将多个类型合并为一个类型</strong></em></p></blockquote><p>需求：数组中有 <code>number</code> 和 <code>string</code> 类型，这个数组的类型如何书写？</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr1<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span>
<span class="token comment">// 数字 或者 字符串数组</span>
<span class="token keyword">let</span> haha<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>定义：</strong></p><ul><li>类型与类型之间使用 <code>|</code> 连接，代表 类型可以是它们当中的其中一种，这种类型叫：<strong>联合类型</strong></li><li>语法 <code>(类型1 | 类型2 | xxxx)</code> 注意联合类型语法是一根竖线</li></ul><blockquote><p>练习：给一个定时器ID添加类型</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> timer <span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型别名" tabindex="-1"><a class="header-anchor" href="#类型别名" aria-hidden="true">#</a> 类型别名</h2><blockquote><ul><li>是什么？ <span style="color:orangered;"><em>给类型起别名</em></span></li><li>为什么要用？ <span style="color:orangered;"><em>为了复用</em></span></li><li>怎么用？ <span style="color:orangered;"><code>type 类型别名 = 具体类型</code></span><ul><li>规范：大驼峰 即每个单词的首字母大写 如MyArrType</li><li>使用场景：当同一类型（复杂）被多次使用时，可以通过类型别名，简化 该类型的使用</li></ul></li></ul></blockquote>`,12),f=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// let arr: ( number | string )[] = [ 1, 'a', 4]"),s(`
`),n("span",{class:"token comment"},"// 类型别名: type 类型别名 = 具体类型"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"CustomArr"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"number"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"let"),s(" arr"),n("span",{class:"token operator"},":"),s(" CustomArr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'a'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"CustomArr"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"number"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"let"),s(" arr"),n("span",{class:"token operator"},":"),s(" CustomArr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'a'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"let"),s(" arr2"),n("span",{class:"token operator"},":"),s(" CustomArr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'b'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=o('<h2 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型" aria-hidden="true">#</a> 函数类型</h2><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><blockquote><p>掌握：给函数指定类型</p></blockquote><ol><li>指定类型的本质：就是给<code>参数</code>和<code>返回值</code>指定类型 写类型注解</li><li>两种写法： <ul><li>分别指定 分别给参数和返回值（写在括号后面）添加类型注解</li><li>同时指定 使用类型别名 <code>type 别名 = 类型</code></li></ul></li></ol>',4),q=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// 普通函数声明"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("num1"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},","),s(" num2"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" num1 "),n("span",{class:"token operator"},"+"),s(" num2"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 箭头函数"),s(`
`),n("span",{class:"token keyword"},"const"),s(" add "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("num1"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},","),s(" num2"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" num1 "),n("span",{class:"token operator"},"+"),s(" num2"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"AddFn"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("num1"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},","),s(" num2"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"const"),s(" add"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function-variable function"},"AddFn"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("num1"),n("span",{class:"token punctuation"},","),s(" num2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" num1 "),n("span",{class:"token operator"},"+"),s(" num2"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),M=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,[s("通过类似箭头函数形式的语法来为函数添加类型，只适用于 "),n("code",null,"函数表达式")]),n("p",null,"即同时指定类型的方式（用类型别名） 只能用在函数表达式")],-1),S=o(`<h2 id="void类型" tabindex="-1"><a class="header-anchor" href="#void类型" aria-hidden="true">#</a> void类型</h2><blockquote><p>掌握：void 函数返回值类型</p></blockquote><p>如果函数没有返回值，定义函数类型时返回值类型为 <code>void</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> say <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果函数没有返回值，且没有定义函数返回值类型的时候，默认是 <code>void</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),j=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"注意"),n("ul",null,[n("li",null,[s("在 "),n("code",null,"JavaScript"),s(" 中如果没有返回值，默认返回的是 "),n("code",null,"undefined")]),n("li",null,[s("但是 "),n("code",null,"void"),s(" 和 "),n("code",null,"undefined"),s(" 在 "),n("code",null,"TypeScript"),s(" 中并不是一回事")]),n("li",null,[s("如果指定返回值类型是 "),n("code",null,"undefined"),s(" 那返回值必须是 "),n("code",null,"undefined")])]),n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" add "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"undefined"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"undefined"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("blockquote",null,[n("p",null,"在TS 5.0.4中和5.1.6中 有区别。 5.0.4中定义函数返回值为undefined，必须要return undefined，而5.1.6中则不需要返回。 不管新版本还是老版本，如果返回值类型是undefined，建议都return undefined。")])],-1),C=n("h2",{id:"可选参数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#可选参数","aria-hidden":"true"},"#"),s(" 可选参数")],-1),D=n("blockquote",null,[n("p",null,[s("可选参数：使用"),n("span",{style:{color:"orangered"}},[n("code",null,"?")]),s("将参数标记为可选")])],-1),P=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[s("如果函数的参数，可以传也可以不传，这种情况就可以使用 可选参数 语法，参数后加 "),n("span",{class:"token operator"},"?"),s(` 即可
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"fn"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// .."),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"//定义函数参数类型"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"mySlice"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("start"),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},","),s(" end"),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'起始Index:'"),n("span",{class:"token punctuation"},","),s(" start"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'结束Index:'"),n("span",{class:"token punctuation"},","),s(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token function"},"mySlice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token function"},"mySlice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token function"},"mySlice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,[s("必选参数不能位于可选参数后 "),n("code",null,"(start?: number, end: number)"),s(" 这样是不行的，"),n("span",{style:{color:"red","font-weight":"bold"}},"即必选参数必须位于可选参数之前"),s("。")]),n("p",null,[n("a",{href:""},"对象中的方法也可以使用可选参数"),s(" 见下方对象类型中的编程练习")])],-1),I=n("p",null,"默认值的写法要去掉?，因为默认值也是可选参数。",-1),L=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"mySlice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("start "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" end "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("start"),n("span",{class:"token punctuation"},","),s(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"mySlice"),n("span",{class:"token punctuation"},"("),s("start"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" end"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("start"),n("span",{class:"token punctuation"},","),s(" end"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=o('<h2 id="对象类型" tabindex="-1"><a class="header-anchor" href="#对象类型" aria-hidden="true">#</a> ❗对象类型</h2><h3 id="基本使用-1" tabindex="-1"><a class="header-anchor" href="#基本使用-1" aria-hidden="true">#</a> 基本使用</h3><blockquote><p>TS 的对象类型，其实就是描述对象中的<span style="color:orangered;font-weight:bold;"><code>属性 方法</code></span> 的类型，因为对象是由属性和方法组成的。</p></blockquote>',3),V=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" persion "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),z=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" person "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" name "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  name`),n("span",{class:"token operator"},":"),n("span",{class:"token string"},"'同学'"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),G=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// 有属性和方法的对象，一行书写多个属性 ; 分隔"),s(`
`),n("span",{class:"token keyword"},"let"),s(" person "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" name "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token function"},"sayHi"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  name`),n("span",{class:"token operator"},":"),n("span",{class:"token string"},"'同学'"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token function"},"sayHi"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" person"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(`
  `),n("span",{class:"token function"},"sayHi"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"void"),s(`
`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'jack'"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token function"},"sayHi"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,[s("使用声明描述对象结构？"),n("code",null,"{}")]),n("li",null,[s("属性怎么写类型？"),n("code",null,"属性名: 类型")]),n("li",null,[s("方法怎么写类型? "),n("code",null,"方法名(): 返回值类型")])])],-1),U=n("h3",{id:"扩展用法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#扩展用法","aria-hidden":"true"},"#"),s(" 扩展用法")],-1),J=n("blockquote",null,[n("p",null,"掌握：对象类型中，函数使用箭头函数类型，属性设置可选，使用类型别名。")],-1),O=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" person"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(`
  `),n("span",{class:"token function-variable function"},"sayHi"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"void"),s(`
`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'jack'"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token function"},"sayHi"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),K=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// 例如：axios({url,method}) 如果是 get 请求 method 可以省略"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"axios"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("config"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(" url"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},";"),s(" method"),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Q=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// {} 会降低代码可阅读性，建议对象使用类型别名"),s(`
`),n("span",{class:"token comment"},"// const axios = (config: { url: string; method?: string }) => {};"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"Config"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  url`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},";"),s(`
  method`),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"axios"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("config"),n("span",{class:"token operator"},":"),s(" Config"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"小结"),n("ul",null,[n("li",null,[s("对象的方法使用箭头函数类型怎么写？"),n("code",null,"{sayHi:()=>void}")]),n("li",null,[s("对象的可选参数怎么设置？"),n("code",null,"{name?: string}")]),n("li",null,[s("对象类型会使用 "),n("code",null,"{}"),s(" 如何提供可阅读性？"),n("code",null,"类型别名")])])],-1),W=o(`<h3 id="编程练习" tabindex="-1"><a class="header-anchor" href="#编程练习" aria-hidden="true">#</a> 编程练习</h3><details class="custom-container details"><summary class="custom-container-title">练习</summary><p>创建一个学生对象，该对象中具有以下属性和方法：</p><ul><li>属性：必选属性：姓名、性别、成绩，可选属性：身高</li><li>方法：学习、打游戏（可选）</li></ul></details><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">StudentType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    score<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
    <span class="token function-variable function">study</span><span class="token operator">:</span> <span class="token punctuation">(</span>subject<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
    play<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> student<span class="token operator">:</span> StudentType <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span>
    score<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token function">study</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> subject
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// todo 调用student.play()</span>
  <span class="token comment">// ? 1.可选链</span>
  student<span class="token punctuation">.</span>play<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// ? 2.逻辑中断</span>
  student<span class="token punctuation">.</span>play <span class="token operator">&amp;&amp;</span> student<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// ? 3.非空断言</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拓展-vscode中-电灯泡-的用法" tabindex="-1"><a class="header-anchor" href="#拓展-vscode中-电灯泡-的用法" aria-hidden="true">#</a> 拓展：VSCode中“电灯泡”的用法</h2><h2 id="接口-interface" tabindex="-1"><a class="header-anchor" href="#接口-interface" aria-hidden="true">#</a> 接口 interface</h2><h3 id="基本使用-2" tabindex="-1"><a class="header-anchor" href="#基本使用-2" aria-hidden="true">#</a> 基本使用</h3><blockquote><p>掌握：使用 interface 声明对象类型</p></blockquote><p>接口声明是命名对象类型的另一种方式 <em>（类型别名）</em></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 通过interface定义对象类型</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用类型</span>
<span class="token keyword">let</span> person<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),X=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"小结"),n("ul",null,[n("li",null,[n("span",{style:{color:"orangered"}},"interface"),s(" 后面是接口名称，和类型别名的意思一样。")]),n("li",null,[s("指定 "),n("span",{style:{color:"orangered"}},"接口名称"),s(" 作为变量的类型使用。")]),n("li",null,[s("接口的每一行只能有 "),n("span",{style:{color:"orangered"}},"一个"),s(" 属性或方法，每一行不需要加分号。")])])],-1),Y=n("h3",{id:"interface-继承",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#interface-继承","aria-hidden":"true"},"#"),s(" interface 继承")],-1),Z=n("blockquote",null,[n("p",null,"掌握：使用 extends 实现接口继承，达到类型复用")],-1),$=n("p",null,"思考：有两个接口，有相同的属性或者函数，如何提高代码复用？",-1),nn=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"Point2D"),s(),n("span",{class:"token punctuation"},"{"),s(`
  x`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
  y`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"Point3D"),s(),n("span",{class:"token punctuation"},"{"),s(`
  x`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
  y`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
  z`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),sn=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"Point2D"),s(),n("span",{class:"token punctuation"},"{"),s(`
  x`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
  y`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 继承 Point2D"),s(`
`),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"Point3D"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"Point2D"),s(),n("span",{class:"token punctuation"},"{"),s(`
  z`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 继承后 Point3D 的结构：{ x: number; y: number; z: number }"),s(`

`),n("span",{class:"token keyword"},"const"),s(" point1"),n("span",{class:"token operator"},":"),s(" point2D "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
    x`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(`
    y`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"const"),s(" point2"),n("span",{class:"token operator"},":"),s(" point3D "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
    x`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(`
    y`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(`
    z`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"2"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),an=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"小结"),n("ul",null,[n("li",null,[s("接口继承的语法："),n("span",{style:{color:"red"}},[n("code",null,"interface 接口A extends 接口B {}")])]),n("li",null,[s("继承后"),n("span",{style:{color:"red"}},[n("code",null,"接口A")]),s(" 拥有"),n("span",{style:{color:"red"}},[n("code",null,"接口B")]),s(" 的所有属性和函数的类型声明")])])],-1),tn=o(`<h3 id="type-交叉类型" tabindex="-1"><a class="header-anchor" href="#type-交叉类型" aria-hidden="true">#</a> type 交叉类型</h3><blockquote><p>掌握：使用 <code>交叉类型</code> 实现接口的继承效果</p></blockquote><p>实现 <code>Point2D</code> 与 <code>{z: number}</code> 类型合并得到 <code>Ponit3D</code> 类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 使用 type 来定义 Point2D 和 Point3D</span>
<span class="token keyword">type</span> <span class="token class-name">Point2D</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 交叉类型 来实现接口继承的功能：</span>
<span class="token comment">// 使用 交叉类型 后，Point3D === { x: number; y: number; z: number }</span>
<span class="token keyword">type</span> <span class="token class-name">Point3D</span> <span class="token operator">=</span> Point2D <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  z<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> o<span class="token operator">:</span> Point3D <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  z<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),en=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"小结"),n("ul",null,[n("li",null,[s("使用 "),n("span",{style:{color:"orangered"}},"&"),s(" 可以合并连接的对象类型，也叫："),n("span",{style:{color:"orangered"}},"交叉类型")])])],-1),on=o('<h3 id="interface-vs-type" tabindex="-1"><a class="header-anchor" href="#interface-vs-type" aria-hidden="true">#</a> 📓interface vs type</h3><blockquote><p>掌握：interface 和 type 的相同点和区别</p></blockquote><ul><li>类型别名和接口非常相似，在许多情况下，可以在它们之间<code>自由选择</code>。</li><li>接口的几乎所有特性都以类型的形式可用，<strong>关键的区别在于不能重新打开类型以添加新属性，而接口总是<code>可扩展</code>的</strong>。</li></ul><table><thead><tr><th style="text-align:left;">interface</th><th style="text-align:left;">type</th></tr></thead><tbody><tr><td style="text-align:left;">支持：对象类型</td><td style="text-align:left;">支持：对象类型，其他类型</td></tr><tr><td style="text-align:left;">复用：可以继承</td><td style="text-align:left;">复用：交叉类型</td></tr><tr><td style="text-align:left;">复用的语法：extends</td><td style="text-align:left;">复用的语法：&amp; 交叉类型</td></tr><tr><td style="text-align:left;">重复声明会合并</td><td style="text-align:left;">不能重复声明，重复声明会报错</td></tr></tbody></table>',4),ln=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"Person"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 标识符“Person”重复  Error"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"Person"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  age`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),cn=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"Person"),s(),n("span",{class:"token punctuation"},"{"),s(`
  name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"interface"),s(),n("span",{class:"token class-name"},"Person"),s(),n("span",{class:"token punctuation"},"{"),s(`
  age`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 类型会合并，注意：属性类型和方法类型不能重复定义"),s(`
`),n("span",{class:"token keyword"},"const"),s(" p"),n("span",{class:"token operator"},":"),s(" Person "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  name`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'jack'"),n("span",{class:"token punctuation"},","),s(`
  age`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"18"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),pn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"小结"),n("ul",null,[n("li",null,"它们都可以定义对象类型"),n("li",null,[s("它们都可以复用，interface 使用 "),n("code",null,"extends"),s(" , type 使用 "),n("code",null,"&")]),n("li",null,"type 不能重复定义，interface 可以重复会合并")])],-1),un=n("h2",{id:"类型推断",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#类型推断","aria-hidden":"true"},"#"),s(" 类型推断")],-1),rn=n("blockquote",null,[n("p",null,"知道：TS 的的类型推断机制作用")],-1),kn=n("p",null,"在 TS 中存在类型推断机制，在没有指定类型的情况下，TS 也会给变量提供类型。",-1),dn=n("p",null,"发生类型推断的几个场景场景：",-1),mn=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// 变量 age 的类型被自动推断为：number"),s(`
`),n("span",{class:"token keyword"},"let"),s(" age "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"18"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),bn=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// 函数返回值的类型被自动推断为：number"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"add"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("num1"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},","),s(" num2"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" num1 "),n("span",{class:"token operator"},"+"),s(" num2"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),vn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"建议"),n("ul",null,[n("li",null,[s("将来在开发项目的时候，能省略类型注解的地方就省略，"),n("code",null,"充分利用TS推断"),s(" 的能力，提高开发效率。")]),n("li",null,"在你还没有熟悉 ts 类型的时候建议都加上类型，比如今天第一次写 ts 最好都写上"),n("li",null,[s("如果你不知道类型怎么写，可以把鼠标放至变量上，可以通过 "),n("code",null,"Vscode"),s(" 提示看到类型")])])],-1),gn=o(`<h2 id="字面量类型" tabindex="-1"><a class="header-anchor" href="#字面量类型" aria-hidden="true">#</a> 字面量类型</h2><h3 id="字面量类型介绍" tabindex="-1"><a class="header-anchor" href="#字面量类型介绍" aria-hidden="true">#</a> 字面量类型介绍</h3><blockquote><p>什么是字面量类型？</p></blockquote><ul><li>js 字面量如：<code>18</code> <code>&#39;jack&#39;</code> <code>[&#39;a&#39;]</code> <code>{age: 10}</code> 等等。</li><li><strong>使用 <code>js字面量</code> 作为变量类型，这种类型就是字面量类型</strong></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// : &#39;jack&#39; 是字面量类型</span>
<span class="token keyword">let</span> name<span class="token operator">:</span> <span class="token string">&#39;jack&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;jack&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// : 18 是字面量类型</span>
<span class="token keyword">let</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>

<span class="token comment">// 报错：不能将类型“19”分配给类型“18”</span>
age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思考：这两个变量的类型是什么？</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&#39;Hello TS&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> <span class="token string">&#39;Hello TS&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过类型推断发现，str1 类型是 <code>string</code> ， str2 类型是 <code>Hello TS</code></li><li>原因：<code>str2</code> 是 <code>const</code> 声明的，值只能是 <code>Hello TS</code>，所以类型只能是 <code>Hello TS</code></li></ul><h3 id="字面量类型应用" tabindex="-1"><a class="header-anchor" href="#字面量类型应用" aria-hidden="true">#</a> 字面量类型应用</h3><blockquote><p>知道：字面量类型的应用场景</p></blockquote>`,10),hn=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[s(`性别只能是男和女，不会出现其他值。
`),n("span",{class:"token comment"},"// ------------------------"),s(`
`),n("span",{class:"token comment"},"// let gender = '男'"),s(`
`),n("span",{class:"token comment"},"// gender = '女'"),s(`
`),n("span",{class:"token comment"},"// ------------------------"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"Gender"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'男'"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token string"},"'女'"),s(`
`),n("span",{class:"token keyword"},"let"),s(" gender"),n("span",{class:"token operator"},":"),s(" Gender "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'男'"),s(`
gender `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'女'"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),yn=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token comment"},"// 使用自定义类型:"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"Direction"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'up'"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token string"},"'down'"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token string"},"'left'"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token string"},"'right'"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"changeDirection"),n("span",{class:"token punctuation"},"("),s("direction"),n("span",{class:"token operator"},":"),s(" Direction"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("direction"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 调用函数时，会有类型提示："),s(`
`),n("span",{class:"token function"},"changeDirection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'up'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token operator"},"-"),s(" 解释：参数 direction 的值只能是 up"),n("span",{class:"token operator"},"/"),s("down"),n("span",{class:"token operator"},"/"),s("left"),n("span",{class:"token operator"},"/"),s(`right 中的任意一个
`),n("span",{class:"token operator"},"-"),s(" 优势：相比于 "),n("span",{class:"token builtin"},"string"),s(` 类型，使用字面量类型更加精确、严谨
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),wn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"小结"),n("p",null,"字面量类型配合联合类型来使用，表示：一组明确的可选的值")],-1),fn=o(`<h2 id="any类型" tabindex="-1"><a class="header-anchor" href="#any类型" aria-hidden="true">#</a> any类型</h2><blockquote><p>知道：any 类型的作用是逃避 TS 的类型检查</p></blockquote><p><strong>显式any的情况</strong>：当变量的类型指定为 any 的时候，不会有任何错误，也不会有代码提示，TS会忽略类型检查</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> obj<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">100</span>
<span class="token function">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> n<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> obj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的代码虽然没有报错提示，但是将来是可能出现错误的。</p><p><strong>隐式any的情况</strong>：声明变量不给类型或初始值，函数参数不给类型或初始值</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 声明变量不给类型或初始值</span>
<span class="token keyword">let</span> a<span class="token punctuation">;</span>
<span class="token comment">// 函数参数不给类型或初始值</span>
<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),xn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"小结"),n("p",null,[n("code",null,"any"),s(" 的使用越多，程序可能出现的漏洞越多，因此"),n("strong",null,"不推荐"),s("使用 "),n("code",null,"any"),s(" 类型，尽量避免使用。")])],-1),_n=n("h2",{id:"类型断言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#类型断言","aria-hidden":"true"},"#"),s(" 类型断言")],-1),qn=n("blockquote",null,[n("p",null,"有时候你会比 TS 更加明确一个值的类型，此时，可以使用类型断言来指定更具体的类型。")],-1),Tn=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token doctype"},[n("span",{class:"token punctuation"},"<!"),n("span",{class:"token doctype-tag"},"doctype"),s(),n("span",{class:"token name"},"html"),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("html")]),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("en"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("head")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("meta")]),s(),n("span",{class:"token attr-name"},"charset"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("UTF-8"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("link")]),s(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("icon"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"type"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("image/svg+xml"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("/vite.svg"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
`),n("span",{class:"token doctype"},[n("span",{class:"token punctuation"},"<!"),n("span",{class:"token doctype-tag"},"doctype"),s(),n("span",{class:"token name"},"html"),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("html")]),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("en"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("head")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("meta")]),s(),n("span",{class:"token attr-name"},"charset"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("UTF-8"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("link")]),s(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("icon"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"type"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("image/svg+xml"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("/vite.svg"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("meta")]),s(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("viewport"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("width=device-width, initial-scale=1.0"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("title")]),n("span",{class:"token punctuation"},">")]),s("Vite + Vue + TS"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("title")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("head")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("body")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("a")]),s(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("https://www.baidu.com"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("link"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("百度"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("a")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("app"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),s(),n("span",{class:"token attr-name"},"type"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("module"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"src"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("/src/main.ts"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"}),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("body")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Mn=n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" aLink "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'#link'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"as"),s(" HTMLAnchorElement "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),s(`
`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("aLink"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token comment"},"// 能获取到aLink元素，但ts类型推断出来的类型范围太广了，HTMLElement指的就是元素标签，没包含 a 元素特有的属性或方法，如 href"),s(`
      `),n("span",{class:"token comment"},"// 而我们的aLink 锚点标签 a标签"),s(`
      `),n("span",{class:"token comment"},"// ts有时候没有我们更确定一个东西的类型，我们自己更确定一个东西的类型 就要用到类型断言"),s(`
      `),n("span",{class:"token comment"},"// 有2种方法可以知道aLink的具体类型"),s(`
      `),n("span",{class:"token comment"},"// 第一种dir打印 第二种 创建个元素或者querySelector元素标签鼠标摸一摸"),s(`
      `),n("span",{class:"token comment"},"// console.dir(aLink)"),s(`
      `),n("span",{class:"token comment"},"// const el1 = document.createElement('a')"),s(`
      `),n("span",{class:"token comment"},"// const el2 = document.querySelector('img')"),s(`
      `),n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("aLink"),n("span",{class:"token punctuation"},"."),s("href"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Sn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"解释"),n("ol",null,[n("li",null,[s("使用 "),n("code",null,"as"),s(" 关键字实现类型断言")]),n("li",null,[s("关键字 "),n("code",null,"as"),s(" 后面的类型是一个更加具体的类型（"),n("code",null,"HTMLAnchorElement"),s(" 是 "),n("code",null,"HTMLElement"),s(" 的子类型）")]),n("li",null,"通过类型断言，aLink 的类型变得更加具体，这样就可以访问 a 标签特有的属性或方法了")]),n("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" img "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'img'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"as"),s(` HTMLImageElement
`),n("span",{class:"token comment"},"// 如果不知道标签的类型：document.querySelector('div') 鼠标摸上去就可以看见"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),jn=n("h2",{id:"泛型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#泛型","aria-hidden":"true"},"#"),s(" 泛型")],-1),Cn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"前言"),n("ul",null,[n("li",null,[s("软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑"),n("strong",null,"可重用性"),s("。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。")]),n("li",null,[s("在TypeScript中，泛型是一种创建"),n("strong",null,"可复用"),s("代码组件的工具。这种组件不只能被一种类型使用，而是能被多种类型复用。类似于参数的作用，泛型是一种用以"),n("strong",null,"增强类型（types）、接口（interfaces）、函数类型等"),s("能力的非常可靠的手段。")])])],-1),Dn=o(`<h3 id="泛型别名" tabindex="-1"><a class="header-anchor" href="#泛型别名" aria-hidden="true">#</a> 泛型别名</h3><blockquote><p>掌握：泛型别名基本使用，实现类型复用</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 对后台返回的数据进行类型定义</span>
<span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Goods</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  goodsName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Data<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  data<span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用类型</span>
<span class="token keyword">type</span> <span class="token class-name">UserData</span> <span class="token operator">=</span> Data<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">GoodsData</span> <span class="token operator">=</span> Data<span class="token operator">&lt;</span>Goods<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Pn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"小结"),n("ul",null,[n("li",null,[s("泛型：定义类型别名后加上"),n("code",null,"<类型参数>"),s(" 就是泛型语法， 使用的时候传入具体的类型即可")]),n("li",null,[n("code",null,"<T>"),s(" 是一个变量，可以随意命名，建议遵循大驼峰即可。")]),n("li",null,"和类型别名配合，在类型别名后加上泛型语法，然后类型别名内就可以使用这个类型参数"),n("li",null,[s("泛型可以提高类型的"),n("code",null,"复用性"),s("和"),n("code",null,"灵活性")])])],-1),Bn=o(`<h3 id="泛型接口" tabindex="-1"><a class="header-anchor" href="#泛型接口" aria-hidden="true">#</a> 泛型接口</h3><blockquote><p>掌握：泛型接口基本使用，实现类型复用，了解内置泛型接口</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 对象，获取单个ID函数，获取所有ID函数，ID的类型肯定是一致的，但是可能是数字可能是字符串</span>
<span class="token keyword">interface</span> <span class="token class-name">IdFn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token function-variable function">id</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  <span class="token function-variable function">ids</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> idObj<span class="token operator">:</span> IdFn<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">ids</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在接口名称的后面添加 <code>&lt;类型变量&gt;</code>，那么，这个接口就变成了泛型接口，接口中所有成员都可以使用类型变量。</p><p>内置的泛型接口：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// TS有自动类型推断，其实可以看做：const arr: Array&lt;number&gt; = [1, 2, 3]</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以通过 Ctrl + 鼠标左键(Mac：Command + 鼠标左键) 去查看内置的泛型接口</li></ul></li></ul>`,4);function Hn(In,Ln){const p=c("ExternalLinkIcon"),e=c("CodeGroupItem"),l=c("CodeGroup");return u(),r("div",null,[n("blockquote",null,[n("p",null,[s("TypeScript官网："),n("a",d,[s("点击跳转"),a(p)])])]),m,b,v,g,a(l,null,{default:t(()=>[a(e,{title:"写法1"},{default:t(()=>[h]),_:1}),a(e,{title:"写法2"},{default:t(()=>[y]),_:1})]),_:1}),w,a(l,null,{default:t(()=>[a(e,{title:"示例代码"},{default:t(()=>[f]),_:1}),a(e,{title:"使用场景"},{default:t(()=>[x]),_:1})]),_:1}),_,a(l,null,{default:t(()=>[a(e,{title:"分别指定"},{default:t(()=>[q]),_:1}),a(e,{title:"同时指定"},{default:t(()=>[T]),_:1})]),_:1}),M,S,j,C,D,a(l,null,{default:t(()=>[a(e,{title:"可选参数"},{default:t(()=>[P]),_:1}),a(e,{title:"模拟slice函数"},{default:t(()=>[B]),_:1})]),_:1}),H,I,a(l,null,{default:t(()=>[a(e,{title:"JavaScript中默认值写法"},{default:t(()=>[L]),_:1}),a(e,{title:"TypeScript中默认值写法"},{default:t(()=>[A]),_:1})]),_:1}),E,a(l,null,{default:t(()=>[a(e,{title:"空对象"},{default:t(()=>[V]),_:1}),a(e,{title:"有属性的对象"},{default:t(()=>[z]),_:1}),a(e,{title:"有属性和方法的对象"},{default:t(()=>[G]),_:1}),a(e,{title:"换行写可以省略 ; 符号"},{default:t(()=>[F]),_:1})]),_:1}),N,U,J,a(l,null,{default:t(()=>[a(e,{title:"函数使用箭头函数类型"},{default:t(()=>[O]),_:1}),a(e,{title:"对象属性可选"},{default:t(()=>[K]),_:1}),a(e,{title:"使用类型别名"},{default:t(()=>[Q]),_:1})]),_:1}),R,W,X,Y,Z,$,a(l,null,{default:t(()=>[a(e,{title:"不使用继承"},{default:t(()=>[nn]),_:1}),a(e,{title:"使用继承后"},{default:t(()=>[sn]),_:1})]),_:1}),an,tn,en,on,a(l,null,{default:t(()=>[a(e,{title:"type 不可重复定义"},{default:t(()=>[ln]),_:1}),a(e,{title:"interface 重复定义会合并"},{default:t(()=>[cn]),_:1})]),_:1}),pn,un,rn,kn,dn,a(l,null,{default:t(()=>[a(e,{title:"声明变量并初始化时"},{default:t(()=>[mn]),_:1}),a(e,{title:"决定函数返回值时"},{default:t(()=>[bn]),_:1})]),_:1}),vn,gn,a(l,null,{default:t(()=>[a(e,{title:"性别"},{default:t(()=>[hn]),_:1}),a(e,{title:"确定方向"},{default:t(()=>[yn]),_:1})]),_:1}),wn,fn,xn,_n,qn,a(l,null,{default:t(()=>[a(e,{title:"HTML"},{default:t(()=>[Tn]),_:1}),a(e,{title:"TypeScript"},{default:t(()=>[Mn]),_:1})]),_:1}),Sn,jn,Cn,Dn,Pn,Bn])}const En=i(k,[["render",Hn],["__file","E:/360MoveData/Users/17439/Desktop/blog/.vuepress/.temp/pages/blogs/TypeScript/learnTs.html.vue"]]);export{En as default};
